[{"name": "app.py", "content": "# This is an interactive data application that features a dashboard displaying a data table, two histograms and two scatterplots \n# for selected datasets. \n\n# Users can modify specific aspects of the visuals and see the results in real-time. \n\n# This data application consists of two components: the user interface and the server section. \n\n# The user interface enables users to issue commands that are executed on the server side.\n\n# Import required dependencies\nimport seaborn as sns\nimport plotly.express as px\nimport palmerpenguins # This package provides palmer penguin dataset.\nfrom shiny import reactive\nfrom shiny.express import input, ui,render\nfrom shinywidgets import render_plotly\n\n##############################\n# Get dataset to be presented and load into pandas dataframe\n###############################\n# Dataset Description\n###############################\n# species: penguin species (Chinstrap, Adelie, or Gentoo)\n# island: island name (Dream, Torgersen, or Biscoe) in the Palmer Archipelago\n# bill_length_mm: length of the bill in millimeters\n# bill_depth_mm: depth of the bill in millimeters\n# flipper_length_mm: length of the flipper in millimeters\n# body_mass_g: body mass in grams\n# sex: MALE or FEMALE\n\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\n\n# Function to handle NaN Errors\n# This function with get rid of rows in a dataframe with NaN values in any column\ndef clean_dataframe(df):\n    # Drop rows where any column contains NaN\n    return df.dropna()\n\n###########################\n#Define and Design our user interface.\n############################\n\n# Create a title for webpage\nui.page_opts(title=\"Arnold Atchoe- Palmer Peguins\", fillable=True)\n\n# Create a sidebar for user input and interaction.\n# Siderbar has the following features:\n# Header for the sidebar.\n# A selector that has 3 options and is currently not linked to any output.\n# An input box that takes only numbers and specify the number of bins for the bill lenght histogram.\n# An input slider that is used to specify the number of bins for the body mass histogram.\n# A list of species of penguins with checkbox to filter the first table.\n# A horizontal line(ui.hr) to separate sections of the side bar.\n# A link to the project github repository named \"GitHub\"\n# Note that the input value indicate in user interface components indicate the default value of these components when we run the program.\n\n\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\")\n    ui.input_selectize(\"Selected_attribute\",\"Select Attribute\",[\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"])\n    ui.input_numeric(\"plotly_bin_count\",\"Number of Plotly Bins\",value=6)\n    ui.input_slider(\"seaborn_bin_count\",\"Number of Seaborn Bins\",value=6,min=4,max=20)\n    ui.input_checkbox_group(\"selected_species_list\",\"Select Species\",[\"Adelie\", \"Gentoo\", \"Chinstrap\"],selected=[\"Adelie\"],inline=True)\n    ui.input_checkbox_group(\"selected_island_list\",\"Select Island\",[\"Biscoe\",\"Dream\",\"Torgersen\"])\n    ui.hr()\n    ui.a(\"GitHub\",href=\"https://github.com/kwameape123/cintel-02-data\",target=\"_blank\")\n\n############################\n# Render the desired charts and visuals\n############################\n\n# Render DataTable and Datagrid within the same layout column.\nwith ui.layout_columns():\n# the reactive.event decorator allows for the filtering of data in data table using the options of the checkbox.  \n    with ui.card(full_screen=True):\n        ui.card_header(\"Data Table for Palmer Penguins\")\n        @reactive.event(input.selected_species_list)\n        def species_data():\n            return penguins_df[penguins_df['species'].isin(input.selected_species_list())]\n# this render.data_frame decorator returns filtered data \n        @render.data_frame\n        def table():\n           return species_data() \n            \n    with ui.card(full_screen=True):\n        ui.card_header(\"Data Grid for Palmer Penguins\")\n        @render.data_frame\n        def grid():\n           return render.DataGrid(data=filtered_data())\n\n# Render plotly and seaborn histogram within the same layout column.\n            \nwith ui.layout_columns():\n     with ui.card(full_screen=True):\n        ui.card_header(\"Distribution of Penguins bill length\")\n        @render_plotly\n        def plot1():\n            return px.histogram(filtered_data(), x=\"bill_length_mm\",nbins=input.plotly_bin_count())\n            \n     with ui.card(full_screen=True):\n        ui.card_header(\"Distribution of Penguins body mass\")\n        @render.plot\n        def plot2():\n            return sns.histplot(data=filtered_data(), x=\"body_mass_g\")\n\n# Render plotly and seaborn scatterplot within the same layout column.\n            \nwith ui.layout_columns(height=\"1000px\"):\n     with ui.card(full_screen=True):\n        ui.card_header(\"Relationship between bill length and body mass(Plotly)\")\n        @render_plotly\n        def plot3():\n         return px.scatter(data_frame=filtered_data(),x=\"bill_length_mm\", y=\"body_mass_g\",color=\"species\",hover_name=\"island\",symbol=\"sex\")\n\n     with ui.card(full_screen=True):\n        ui.card_header(\"Relationship between bill length and body mass(Seaborn)\")\n        @render.plot\n        def plot4():\n         return sns.scatterplot(data=filtered_data(),x=\"bill_length_mm\", y=\"body_mass_g\",hue=\"species\")\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data with respect to species and island\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    Speciesmatch=penguins_df[\"species\"].isin(input.selected_species_list())\n    Islandmatch= penguins_df[\"island\"].isin(input.selected_island_list())\n    filtered_data=penguins_df[Speciesmatch & Islandmatch]\n    return clean_dataframe(filtered_data)\n", "type": "text"}]